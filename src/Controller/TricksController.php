<?php

namespace App\Controller;

use App\Entity\Tricks;
use App\Form\TricksType;
use App\Form\TricksEditType;
use App\Form\TricksEditImageType;
use App\Form\VideoType;
use App\Repository\TricksRepository;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use App\Service\FileUploader;
use Symfony\Component\HttpFoundation\File\Exception\FileException; 
use App\Entity\Commentaires;
use App\Form\CommentairesType;
use App\Repository\CommentairesRepository;
//use App\templates\commentaires;
use App\Entity\User;
use App\Form\UserType;
use App\Form\UserShowType;
use App\Repository\UsersRepository;
use Symfony\Component\HttpFoundation\JsonResponse;
use App\Entity\Paginator;
use App\Form\PaginatorType;
use App\Repository\PaginatorRepository;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;

use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;




class TricksController extends AbstractController
{
    /**
     * @Route("/", name="tricks_index", methods="GET")
     */
    public function index(TricksRepository $tricksRepository): Response
    {
         
        return $this->render('tricks/index.html.twig', ['tricks' => $tricksRepository->nombreTrick(0, 4)]);
    }

    /** 
    * @Route("/trick/ajax", name="trick_ajax", methods="GET|POST") 
    */ 
    public function ajaxAction(Request $request, TricksRepository $tricksRepository) 
    {  
        $id = $request->request->get('id');
        $tricks = $tricksRepository->nombreTrick($id, 4);
        return $this->render('tricks/blockTrick.html.twig', ['tricks' => $tricks]);
        return new JsonResponse($tricks); 
    }         

    /**
     * @Route("/connexion", name="tricks_connexion", methods="GET")
     */
    public function connexion(): Response
    {
        return $this->render('connexion.html.twig');
    }

    /**
     * @Route("/inscription", name="tricks_inscription", methods="GET")
     */
    public function inscription(): Response
    {
        return $this->render('inscription.html.twig');
    }

    /**
     * @Route("/{id}/new/trick", name="tricks_new", methods="GET|POST")
     */
    public function new(Request $request, User $user): Response
    {
        
        $trick = new Tricks();
        $form = $this->createForm(TricksType::class, $trick);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {

            $file = $trick->getImage();
            
            /*$fileName = $fileUploader->upload($file);
            $trick->setImage($fileName);*/
            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            // Move the file to the directory where images are stored
            try {
                
                    $file->move($this->getParameter('images_directory'),$fileName );
                    $trick->setImage($fileName);
                    $em = $this->getDoctrine()->getManager();
                    $date = new \DateTime();
                    $trick->setDateCreation($date->format("d-m-Y h:i"));
                    $trick->addAuteur($this->getUser());

                    $em->persist($trick);
                    $em->flush();
                    $this->addFlash('success', 'Votre figure à bien été enregistré.');

                } 
                
                catch (FileException $e) 
                {
                    $this->addFlash('error', "La figure n'a pas pu être enregistré.");

                }

            

            return $this->redirectToRoute('tricks_index');
    }

        return $this->render('tricks/new.html.twig', [
            'trick' => $trick,
            'user' => $user,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @Route("/{id}/{page}/show", name="tricks_show", methods={"GET", "POST"})
     */
    public function show(Tricks $trick, Request $request, CommentairesRepository $CommentairesRepository, $page): Response
    {
         
        $commentaires = new Commentaires();
        $form = $this->createForm(CommentairesType::class, $commentaires);
        $form->handleRequest($request);
        $nombreMaxParPage = 2;
        $nombreMax = 2;
        $firstResult = ($page-1) * $nombreMaxParPage;
        $commentaireAffichage = $CommentairesRepository->nombreCommentaire($firstResult, $nombreMax, $trick->getId());

        
        $commentairePagination = $CommentairesRepository->paginationCommentaire($page, $nombreMaxParPage, $trick->getId());
        
        $pagination = array(
            'page' => $page,
            'nbPages' => ceil(count($commentairePagination) / $nombreMaxParPage),
            'nomRoute' => 'tricks_show',
            'paramsRoute' => array('id' => $trick->getId())
        );


        
        if ($form->isSubmitted() && $form->isValid()) 
        {

            $date = new \DateTime();
            $commentaires->setDateCommentaire($date->format("d-m-Y H:i"));
            $user->addCommentaire(
                $commentaires);
            $trick->addCommentaire($commentaires);

            $em = $this->getDoctrine()->getManager();
            $em->persist($trick, $user, $commentaires);
            $em->flush();
             
        }
        
        
        
      return $this->render('tricks/show.html.twig', ['trick' => $trick, 'form' => $form->createView(),'commentaireAffichage' => $commentaireAffichage, 'commentairePagination' => $commentairePagination,
            'pagination' => $pagination]); 
    
    }

    /**
     * @Route("/{id}/edit", name="tricks_edit", methods="GET|POST")
     */
    public function edit(Request $request, Tricks $trick): Response
    {
        $form = $this->createForm(TricksEditType::class, $trick);
        
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            /*$file = $trick->getImage();
            $fileName = $fileUploader->upload($file);
            $trick->setImage($fileName);*/
            /*$fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();*/
            $date = new \DateTime();
            $trick->setDateModification($date->format("d-m-Y H:i"));
            
            // Move the file to the directory where images are stored
            try 
            {
                /*$file->move(
                    $this->getParameter('images_directory'),
                    $fileName
                );*/
               /* $trick->setImage($fileName);*/
                $em = $this->getDoctrine()->getManager();
                $em->persist($trick);
                $em->flush();
                $this->addFlash('success', 'Votre figure à bien été modifié !!!');
            } 
            catch (FileException $e) 
            {
                $this->addFlash('error', "La figure n'a pas pu être modifié.");

            }
            
            return $this->redirectToRoute('tricks_index', ['id' => $trick->getId()]);
        }

        return $this->render('tricks/edit.html.twig', [
            'trick' => $trick,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("/{id}/editImage", name="tricks_edit_image", methods="GET|POST")
     */
    public function editImage(Request $request, Tricks $trick): Response
    {
        $form = $this->createForm(TricksEditImageType::class, $trick);
        
        $form->handleRequest($request);
        
        if ($form->isSubmitted() && $form->isValid()) {
            
            $date = new \DateTime();
            $trick->setDateModification($date->format("d-m-Y H:i"));
            
            // Move the file to the directory where images are stored
            try 
            {
                $em = $this->getDoctrine()->getManager();
                $em->persist($trick);
                $em->flush();
                $this->addFlash('success', 'Votre image à bien été modifié !!!');
            } 
            catch (FileException $e) 
            {
                $this->addFlash('error', "L'image n'a pas pu être modifié.");

            }
            
            return $this->redirectToRoute('tricks_index', ['id' => $trick->getId()]);
        }

        return $this->render('tricks/editImage.html.twig', [
            'trick' => $trick,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("/{id}/editVideo", name="tricks_video", methods="GET|POST")
     */
    public function TricksVideo(Request $request, Tricks $trick): Response
    {
        $form = $this->createForm(VideoType::class, $trick);
        
        $form->handleRequest($request);
        
        if ($form->isSubmitted() && $form->isValid()) {
            
            $date = new \DateTime();
            $trick->setDateModification($date->format("d-m-Y H:i"));
            
            // Move the file to the directory where images are stored
            try 
            {
                $em = $this->getDoctrine()->getManager();
                $em->persist($trick);
                $em->flush();
                $this->addFlash('success', 'Votre vidéo à bien été modifié !!!');
            } 
            catch (FileException $e) 
            {
                $this->addFlash('error', "La vidéo n'a pas pu être modifié.");

            }
            
            return $this->redirectToRoute('tricks_index', ['id' => $trick->getId()]);
        }

        return $this->render('tricks/editVideo.html.twig', [
            'trick' => $trick,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("/{id}", name="tricks_delete", methods="DELETE")
     */
    public function delete(Request $request, Tricks $trick): Response
    {
        if ($this->isCsrfTokenValid('delete'.$trick->getId(), $request->request->get('_token'))) {
            $em = $this->getDoctrine()->getManager();
            $em->remove($trick);
            $em->flush();
        }

        return $this->redirectToRoute('tricks_index');
    }


}
